import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as s,b as n,d as e,w as t,e as o}from"./app-48cd8982.js";const u={},r=s("h3",{id:"简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),n(" 简介")],-1),d=o(`<h3 id="为什么要使用服务注册与发现" tabindex="-1"><a class="header-anchor" href="#为什么要使用服务注册与发现" aria-hidden="true">#</a> 为什么要使用服务注册与发现？</h3><div class="hint-container info"><p class="hint-container-title">屏蔽、解耦服务之间相互依赖的细节</p><p>我们知道服务之间的远程调用必须要知道对方的IP、端口信息。我们可以在调用方直接配置被调用方的IP、端口，这种调用方直接依赖IP、端口的方式存在明显的问题，如被调用的IP、端口变化后，调用方法也要同步修改。通过服务发现，将服务之间IP与端口的依赖转化为服务名的依赖，服务名可以根据具微服务业务来做标识，因此，屏蔽、解耦服务之间的依赖细节是服务发现与注册解决的第一个问题。</p></div><div class="hint-container info"><p class="hint-container-title">对服务进行动态管理</p><p>在微服务架构中，服务众多，服务之间的相互依赖也错综复杂，无论是服务主动停止，意外挂掉，还是因为流量增加对服务实现进行扩容，这些服务数据或状态上的动态变化，都需要尽快的通知到被调用方，被调用方再采取相应的措施。因此，对于服务注册与发现要实时管理着服务的数据与状态，包括服务的注册上线、服务主动下线，异常服务的剔除。<br> 服务发现将服务IP、端口等细节通过一个服务名抽象给调用者，并动态管理着各个微服务的状态检测、状态更新，服务上线，下线等，这些都是微服务治理的基础，包括负载均衡，链路跟踪。</p></div><h3 id="注册中心配置" tabindex="-1"><a class="header-anchor" href="#注册中心配置" aria-hidden="true">#</a> 注册中心配置</h3><p><code>Consul:Url</code>服务注册中心地址</p><p><code>Consul:Interval</code>服务注册信息定时同步刷新到本地的时间间隔，单位：秒，小于等于0时将实时获取</p><p><code>Consul:DataCenter</code>数据中心</p><p>配置示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Consul&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8500&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//定时同步数据时间间隔，单位：秒 小于等于0表示立即响应</span>
    <span class="token property">&quot;Interval&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token comment">//数据中心</span>
    <span class="token property">&quot;DataCenter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dc1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务信息配置" tabindex="-1"><a class="header-anchor" href="#服务信息配置" aria-hidden="true">#</a> 服务信息配置</h3><p><code>Consul:Service:Option</code>服务类别，<code>Http</code>表示<code>http服务</code>，<code>Grpc</code>表示<code>grpc服务</code></p>`,11),k=s("code",null,"Consul:Service:HealthCheck:Url",-1),v=s("code",null,"http服务",-1),m=s("code",null,"/health",-1),h=s("code",null,"grpc",-1),q=s("code",null,"{Scheme}://{Host}:{Port}/health",-1),b=s("code",null,"{Host}:{Port}",-1),g=o(`<p><code>Consul:Service:HealthCheck:Timeout</code>健康检查超时时间间隔，单位：秒，默认：10</p><p><code>Consul:Service:HealthCheck:Interval</code>健康检查时间间隔，单位：秒，默认：10</p><p><code>Consul:Service:Name</code>服务名称，如果名称相同，将判定为同一个服务的不同节点</p><p><code>Consul:Service:Host</code>服务IP或域名</p><p><code>Consul:Service:Port</code>服务端口</p><p><code>Consul:Service:LoadBalancer:Option</code>负载均衡算法，<code>RoundRobin</code>表示轮询，<code>WeightRoundRobin</code>表示加权轮询，<code>LeastConnection</code>表示最小连接数</p><p><code>Consul:Service:LoadBalancer:Weight</code>加权轮询权重</p><p><code>Consul:Service:Scheme</code>http或https</p><p><code>Consul:Service:Developer</code>开发者</p><p>配置示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Consul&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8500&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//Http  Grpc</span>
      <span class="token property">&quot;Option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Grpc&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;HealthCheck&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost:2110&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">//单位：秒</span>
        <span class="token property">&quot;Timeout&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token comment">//单位：秒</span>
        <span class="token property">&quot;Interval&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Wing.Demo_2.1&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Port&quot;</span><span class="token operator">:</span> <span class="token number">2110</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;LoadBalancer&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//RoundRobin  WeightRoundRobin LeastConnection</span>
        <span class="token property">&quot;Option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;WeightRoundRobin&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">//权重</span>
        <span class="token property">&quot;Weight&quot;</span><span class="token operator">:</span> <span class="token number">4</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Scheme&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Developer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linguicheng&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//定时同步数据时间间隔，单位：秒 小于等于0表示立即响应</span>
    <span class="token property">&quot;Interval&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token comment">//数据中心</span>
    <span class="token property">&quot;DataCenter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dc1&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//等待时间,单位：分钟</span>
    <span class="token property">&quot;WaitTime&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务调用" tabindex="-1"><a class="header-anchor" href="#服务调用" aria-hidden="true">#</a> 服务调用</h3>`,12),y=s("code",null,"IServiceFactory",-1),_=s("code",null,"InvokeAsync",-1),C=s("code",null,"Invoke",-1),f=o(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> _serviceFactory<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Wing.Demo_1.4&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> serviceAddr <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> GrpcChannel<span class="token punctuation">.</span><span class="token function">ForAddress</span><span class="token punctuation">(</span>serviceAddr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> greeterClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Greeter<span class="token punctuation">.</span>GreeterClient</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> greeterClient<span class="token punctuation">.</span><span class="token function">SayHelloAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HelloRequest</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Wing&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">服务状态</p><p>请注意<code>Wing</code>的服务状态有4种，分别是<code>健康</code>、<code>警告</code>、<code>死亡</code>、<code>维护</code>，服务状态更新的频率是根据你设置的健康检查的时间间隔。而服务调用只会查找<code>健康</code>状态的服务，<code>Wing</code>并不会主动删除这些非<code>健康</code>状态的服务。</p></div>`,2);function S(w,I){const a=c("RouterLink");return l(),i("div",null,[r,s("p",null,[n("服务注册概念及入门教程请前往 "),e(a,{to:"/guide/quick-start/register.html"},{default:t(()=>[n("1.2")]),_:1}),n(" 章节")]),s("p",null,[n("服务发现概念及入门教程请前往 "),e(a,{to:"/guide/quick-start/discovery.html"},{default:t(()=>[n("1.4")]),_:1}),n(" 章节")]),d,s("p",null,[k,n("健康检查地址，"),v,n("框架默认生成一个"),m,n("接口，"),h,n("服务需自行按标准生成健康检查接口，参考示例 "),e(a,{to:"/guide/quick-start/discovery.html"},{default:t(()=>[n("1.4")]),_:1}),n("，http默认："),q,n("，grpc默认："),b]),g,s("p",null,[n("注入服务接口"),y,n(",异步调用方法"),_,n("，同步调用方法"),C,n("，实参传服务名称，回调函数可以获取服务实际地址，调用示例参照 "),e(a,{to:"/guide/quick-start/discovery.html"},{default:t(()=>[n("1.4")]),_:1}),n(" 章节")]),f])}const R=p(u,[["render",S],["__file","register-discovery.html.vue"]]);export{R as default};
