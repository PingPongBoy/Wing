import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as l,a as t,b as e,d as r,w as s,e as c}from"./app-e92c2eb3.js";const p={},d=t("h3",{id:"简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),e(" 简介")],-1),h=c('<h3 id="为什么要使用服务网关" tabindex="-1"><a class="header-anchor" href="#为什么要使用服务网关" aria-hidden="true">#</a> 为什么要使用服务网关？</h3><div class="hint-container info"><p class="hint-container-title">单体应用</p><p>浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路返回给浏览器，对单体应用来说是可以不用网关的。</p></div><div class="hint-container info"><p class="hint-container-title">微服务</p><p>微服务的应用可能是部署在不同机房、不同地区、不同域名下的。此时客户端想要请求对应的服务，都需要知道机器的具体IP或域名；当微服务实例众多时，对客户端来说就难以维护。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务网址，再把请求发送到服务实例上。</p></div><p><strong>如果由客户端直接请求各个微服务，会存在以下问题：</strong></p><ul><li><p>客户端多次请求不同的微服务，增加了网络的负担和客户端的复杂性</p></li><li><p>身份认证问题，每个微服务都需要独立身份认证</p></li><li><p>难以重构，随着项目的迭代，可能需要重新规划微服务</p></li><li><p>存在跨域请求，每个服务都要处理，非常麻烦</p></li></ul><p><strong>因此，我们需要网关介于客户端和服务端之间的中间层，所有外部请求率先经过网关，客户端只需要与网关交互，只需要知道网关地址即可，这样简化了开发，并且有以下优点：</strong></p><ul><li><p>易于监控，可在微服务网关收集监控数据并进行数据分析</p></li><li><p>易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证</p></li><li><p>减少了客户端与每个微服务之间的交互次数</p></li><li><p>可以在网关设置统一或个性化的服务策略，比如熔断、超时、重试、限流、舱壁等。</p></li></ul>',7);function u(_,f){const i=n("RouterLink");return o(),l("div",null,[d,t("p",null,[e("服务网关概念及入门教程请前往 "),r(i,{to:"/guide/quick-start/gateway.html"},{default:s(()=>[e("1.5")]),_:1}),e(" 章节")]),h])}const x=a(p,[["render",u],["__file","introduce.html.vue"]]);export{x as default};
